generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = "-1"
}

datasource db {
  provider     = "mysql"
  url          = env("DB_URL")
  relationMode = "prisma"
}

model UserProfile {
  id            String       @id @default(cuid())
  fullName      String
  email         String       @unique
  password      String
  contactNo     String
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  // Relational Fields
  // Single relationship
  lecturer      Lecturer[]
  student       Student[]
  // One user can create many posts and many replies
  createdPosts  ModulePost[] @relation("CreatedPosts")
  favoritePosts ModulePost[]
  replies       Reply[]
}

model Lecturer {
  id           String         @id @default(cuid())
  tenure       Tenure         @default(FULLTIME)
  userId       String
  schoolId     String
  userProfile  UserProfile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  modules      Module[]
  school       School         @relation(fields: [schoolId], references: [id])
  appointments Appointment[]
  uploads      ModuleUpload[]

  @@index([schoolId])
  @@index([userId])
}

model Appointment {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  editedAt     DateTime? @default(now())
  // To identify who accepted the appointment
  studAccept   Boolean   @default(false)
  lectAccept   Boolean   @default(false)
  studAcceptAt DateTime?
  lectAcceptAt DateTime?
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  location     String
  startTime    DateTime
  endTime      DateTime
  studentId    String
  lecturerId   String
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lecturer     Lecturer  @relation(fields: [lecturerId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([lecturerId])
}

model Institution {
  id              String           @id @default(cuid())
  institutionCode InstitutionCodes @default(IICP)
  school          School[]
}

model School {
  id            String      @id @default(cuid())
  schoolCode    String      @unique
  name          String
  description   String?
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  programme     Programme[]
  students      Student[]
  lecturer      Lecturer[]

  @@index([institutionId])
}

model Student {
  id           String             @id @default(cuid())
  session      Sessions           @default(APR2023)
  userId       String
  userProfile  UserProfile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolId     String?
  school       School?            @relation(fields: [schoolId], references: [id])
  modules      ModuleEnrollment[]
  appointments Appointment[]

  @@index([schoolId])
  @@index([userId])
}

model ModuleEnrollment {
  createdAt       DateTime @default(now())
  enrollmentGrade Int?
  studentId       String
  moduleId        String
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  module          Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([studentId, moduleId])
  @@index([studentId])
  @@index([moduleId])
}

model Programme {
  id            String   @id @default(cuid())
  programmeCode String   @unique
  programmeName String
  programmeDesc String?
  schoolId      String
  school        School   @relation(fields: [schoolId], references: [id])
  modules       Module[]

  @@index([schoolId])
}

model Module {
  id                String             @id @default(cuid())
  moduleCode        String             @unique
  moduleTitle       String
  moduleDesc        String?            @db.Text
  programmeId       String
  lecturerId        String?
  programme         Programme          @relation(fields: [programmeId], references: [id])
  lecturer          Lecturer?          @relation(fields: [lecturerId], references: [id])
  moduleEnrollments ModuleEnrollment[]
  modulePosts       ModulePost[]
  moduleUploads     ModuleUpload[]

  @@index([programmeId])
  @@index([lecturerId])
}

model ModulePost {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?   @db.Text
  moduleId  String
  module    Module    @relation(fields: [moduleId], references: [id])
  replies   Reply[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime? @default(now())

  authorId    String
  author      UserProfile   @relation("CreatedPosts", fields: [authorId], references: [id])
  favoritedBy UserProfile[]

  @@index([moduleId])
  @@index([authorId])
}

enum UploadTypes {
  IMGFILE
  VIDEOFILE
  PDF
  LINK
}

model ModuleUpload {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  url         String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  editedAt    DateTime?   @default(now())
  uploadType  UploadTypes @default(LINK)
  moduleId    String
  module      Module      @relation(fields: [moduleId], references: [id])
  uploaderId  String
  uploader    Lecturer    @relation(fields: [uploaderId], references: [id])

  @@index([moduleId])
  @@index([uploaderId])
}

model Reply {
  replyId           Int         @id @default(autoincrement())
  content           String?     @db.Text
  modulePostId      Int
  moduleDiscussions ModulePost  @relation(fields: [modulePostId], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  authorId          String
  author            UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  editedAt          DateTime?   @default(now())

  @@index([modulePostId])
  @@index([authorId])
}

enum Tenure {
  FULLTIME
  PARTTIME
}

enum InstitutionCodes {
  IICP
  IIUN
  IICS
  ICS
}

enum Sessions {
  APR2023
  AUG2023
  JAN2024
  APR2024
}
