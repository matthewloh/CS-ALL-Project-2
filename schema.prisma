generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = "5"
}

datasource db {
  provider     = "mysql"
  url          = env("DB_URL")
  relationMode = "prisma"
}

model UserProfile {
  id        String     @id @default(cuid())
  fullName  String
  email     String     @unique
  password  String
  contactNo String
  isAdmin   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lecturer  Lecturer[]
  student   Student[]
}

model Lecturer {
  id          String      @id @default(cuid())
  tenure      Tenure      @default(FULLTIME)
  userId      String
  schoolId    String
  userProfile UserProfile @relation(fields: [userId], references: [id])
  modules     Module[]
  school      School      @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@index([userId])
}

model Institution {
  id              String           @id @default(cuid())
  institutionCode InstitutionCodes @default(IICP)
  school          School[]
}

model School {
  id            String      @id @default(cuid())
  schoolCode    String      @unique
  name          String
  description   String?
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  programme     Programme[]
  students      Student[]
  lecturer      Lecturer[]

  @@index([institutionId])
}

model Student {
  id          String             @id @default(cuid())
  session     Sessions           @default(APR2023)
  userId      String
  schoolId    String?
  userProfile UserProfile        @relation(fields: [userId], references: [id])
  school      School?            @relation(fields: [schoolId], references: [id])
  modules     ModuleEnrollment[]

  @@index([schoolId])
  @@index([userId])
}

model ModuleEnrollment {
  createdAt       DateTime @default(now())
  enrollmentGrade Int?
  studentId       String
  moduleId        String
  student         Student  @relation(fields: [studentId], references: [id])
  module          Module   @relation(fields: [moduleId], references: [id])

  @@id([studentId, moduleId])
  @@index([studentId])
  @@index([moduleId])
}

model Programme {
  id            String   @id @default(cuid())
  programmeCode String   @unique
  programmeName String
  programmeDesc String?
  schoolId      String
  school        School   @relation(fields: [schoolId], references: [id])
  modules       Module[]

  @@index([schoolId])
}

model Module {
  id                String             @id @default(cuid())
  moduleCode        String             @unique
  moduleTitle       String
  moduleDesc        String?            @db.Text
  programmeId       String
  lecturerId        String?
  programme         Programme          @relation(fields: [programmeId], references: [id])
  lecturer          Lecturer?          @relation(fields: [lecturerId], references: [id])
  moduleEnrollments ModuleEnrollment[]

  @@index([programmeId])
  @@index([lecturerId])
}

enum Tenure {
  FULLTIME
  PARTTIME
}

enum InstitutionCodes {
  IICP
  IIUN
  IICS
  ICS
}

enum Sessions {
  APR2023
  AUG2023
  JAN2024
  APR2024
}
